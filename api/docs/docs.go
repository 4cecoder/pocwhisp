// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth/login": {
            "post": {
                "description": "Authenticate a user with username/email and password, returns JWT tokens",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "User login",
                "parameters": [
                    {
                        "description": "Login credentials",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Login successful",
                        "schema": {
                            "$ref": "#/definitions/handlers.AuthResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid credentials or account disabled",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/profile": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get the authenticated user's profile information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Get user profile",
                "responses": {
                    "200": {
                        "description": "User profile",
                        "schema": {
                            "$ref": "#/definitions/handlers.UserResponse"
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/register": {
            "post": {
                "description": "Create a new user account with username, email, and password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "User registration",
                "parameters": [
                    {
                        "description": "Registration details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.RegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Registration successful",
                        "schema": {
                            "$ref": "#/definitions/handlers.UserResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Username or email already exists",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/health": {
            "get": {
                "description": "Get the current health status of the API and all its dependencies",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Health"
                ],
                "summary": "Check API health",
                "responses": {
                    "200": {
                        "description": "API is healthy",
                        "schema": {
                            "$ref": "#/definitions/models.HealthResponse"
                        }
                    },
                    "503": {
                        "description": "API is unhealthy",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/live": {
            "get": {
                "description": "Simple health check to verify the API is running",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Health"
                ],
                "summary": "Check API liveness",
                "responses": {
                    "200": {
                        "description": "API is alive",
                        "schema": {
                            "$ref": "#/definitions/models.HealthResponse"
                        }
                    }
                }
            }
        },
        "/ready": {
            "get": {
                "description": "Check if the API is ready to accept requests",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Health"
                ],
                "summary": "Check API readiness",
                "responses": {
                    "200": {
                        "description": "API is ready",
                        "schema": {
                            "$ref": "#/definitions/models.HealthResponse"
                        }
                    },
                    "503": {
                        "description": "API is not ready",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/transcribe": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    },
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Upload an audio file for transcription and optional summarization",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transcription"
                ],
                "summary": "Upload and transcribe audio file",
                "parameters": [
                    {
                        "type": "file",
                        "description": "Audio file (WAV, MP3, FLAC, M4A)",
                        "name": "file",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "description": "Enable AI summarization of the transcript",
                        "name": "enable_summarization",
                        "in": "formData"
                    },
                    {
                        "enum": [
                            "high",
                            "medium",
                            "low"
                        ],
                        "type": "string",
                        "description": "Transcription quality (high, medium, low)",
                        "name": "quality",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Language code for transcription (auto-detect if not specified)",
                        "name": "language",
                        "in": "formData"
                    },
                    {
                        "type": "boolean",
                        "description": "Enable stereo channel separation for speaker diarization",
                        "name": "channel_separation",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Transcription completed successfully",
                        "schema": {
                            "$ref": "#/definitions/models.TranscriptionResponse"
                        }
                    },
                    "202": {
                        "description": "Transcription queued for processing",
                        "schema": {
                            "$ref": "#/definitions/models.AsyncResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request or file format",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "413": {
                        "description": "File too large",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "415": {
                        "description": "Unsupported media type",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "429": {
                        "description": "Rate limit exceeded",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/transcribe/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    },
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieve a previously completed transcription by its session ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transcription"
                ],
                "summary": "Get transcription by session ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Session ID for the transcription",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Transcription found",
                        "schema": {
                            "$ref": "#/definitions/models.TranscriptionResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid session ID",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Transcription not found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "handlers.AuthResponse": {
            "type": "object",
            "properties": {
                "expires_at": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "tokens": {
                    "$ref": "#/definitions/services.TokenPair"
                },
                "user": {
                    "$ref": "#/definitions/handlers.UserResponse"
                }
            }
        },
        "handlers.LoginRequest": {
            "type": "object",
            "required": [
                "password",
                "username"
            ],
            "properties": {
                "password": {
                    "type": "string"
                },
                "remember": {
                    "type": "boolean"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "handlers.RegisterRequest": {
            "type": "object",
            "required": [
                "email",
                "password",
                "username"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "minLength": 8
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "username": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 3
                }
            }
        },
        "handlers.UserResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "is_active": {
                    "type": "boolean"
                },
                "last_login": {
                    "type": "string"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "models.AsyncResponse": {
            "description": "Response for asynchronous operations that are queued for processing",
            "type": "object",
            "properties": {
                "check_url": {
                    "type": "string",
                    "example": "/api/v1/transcribe/job_12345"
                },
                "estimated_eta": {
                    "type": "string",
                    "example": "30s"
                },
                "job_id": {
                    "type": "string",
                    "example": "job_12345"
                },
                "message": {
                    "type": "string",
                    "example": "Audio file queued for processing"
                },
                "request_id": {
                    "type": "string",
                    "example": "req_12345"
                },
                "status": {
                    "type": "string",
                    "example": "queued"
                },
                "timestamp": {
                    "type": "string",
                    "example": "2023-10-15T14:30:45Z"
                }
            }
        },
        "models.ErrorResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "error": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "request_id": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "string"
                }
            }
        },
        "models.HealthResponse": {
            "type": "object",
            "properties": {
                "dependencies": {
                    "description": "dependency status",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "gpu_available": {
                    "description": "GPU availability",
                    "type": "boolean"
                },
                "last_checked": {
                    "description": "last health check time",
                    "type": "string"
                },
                "memory_usage": {
                    "description": "memory usage stats",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "models": {
                    "description": "model status",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "status": {
                    "description": "\"healthy\", \"degraded\", \"unhealthy\"",
                    "type": "string"
                },
                "uptime": {
                    "description": "uptime in seconds",
                    "type": "number"
                },
                "version": {
                    "description": "API version",
                    "type": "string"
                }
            }
        },
        "models.Metadata": {
            "type": "object",
            "properties": {
                "duration": {
                    "description": "audio duration in seconds",
                    "type": "number"
                },
                "model_versions": {
                    "description": "AI model versions",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.ModelVersions"
                        }
                    ]
                },
                "processed_at": {
                    "description": "timestamp of processing",
                    "type": "string"
                },
                "processing_time": {
                    "description": "processing time in seconds",
                    "type": "number"
                }
            }
        },
        "models.ModelVersions": {
            "type": "object",
            "properties": {
                "llama": {
                    "description": "e.g., \"7b\"",
                    "type": "string"
                },
                "whisper": {
                    "description": "e.g., \"large-v3\"",
                    "type": "string"
                }
            }
        },
        "models.Summary": {
            "description": "AI-generated summary of the transcribed audio content",
            "type": "object",
            "properties": {
                "key_points": {
                    "description": "extracted key points",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "[\"Project timeline discussion\"",
                        " \"Budget allocation\"",
                        " \"Team assignments\"]"
                    ]
                },
                "sentiment": {
                    "description": "\"positive\", \"neutral\", \"negative\"",
                    "type": "string",
                    "example": "positive"
                },
                "text": {
                    "description": "main summary text",
                    "type": "string",
                    "example": "This conversation discusses project planning and resource allocation."
                }
            }
        },
        "models.Transcript": {
            "description": "Complete transcription result containing all segments",
            "type": "object",
            "properties": {
                "segments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.TranscriptSegment"
                    }
                }
            }
        },
        "models.TranscriptSegment": {
            "description": "A single segment of transcribed audio with speaker information and timing",
            "type": "object",
            "properties": {
                "end_time": {
                    "description": "in seconds",
                    "type": "number",
                    "example": 3.2
                },
                "speaker": {
                    "description": "\"left\" or \"right\"",
                    "type": "string",
                    "example": "left"
                },
                "start_time": {
                    "description": "in seconds",
                    "type": "number",
                    "example": 0.5
                },
                "text": {
                    "description": "transcribed text",
                    "type": "string",
                    "example": "Hello, this is a test."
                }
            }
        },
        "models.TranscriptionResponse": {
            "type": "object",
            "properties": {
                "metadata": {
                    "$ref": "#/definitions/models.Metadata"
                },
                "summary": {
                    "$ref": "#/definitions/models.Summary"
                },
                "transcript": {
                    "$ref": "#/definitions/models.Transcript"
                }
            }
        },
        "services.TokenPair": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "expires_in": {
                    "type": "integer"
                },
                "refresh_token": {
                    "type": "string"
                },
                "token_type": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
