version: '3.8'

services:
  # PostgreSQL Database (production-ready alternative to SQLite)
  database:
    image: postgres:15-alpine
    container_name: pocwhisp-database
    environment:
      POSTGRES_DB: pocwhisp
      POSTGRES_USER: pocwhisp
      POSTGRES_PASSWORD: ${DB_PASSWORD:-pocwhisp_secure_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U pocwhisp -d pocwhisp"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - pocwhisp-network

  # Redis for caching and job queue
  redis:
    image: redis:7-alpine
    container_name: pocwhisp-redis
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - pocwhisp-network

  # AI Service with GPU support
  ai-service:
    build:
      context: ..
      dockerfile: docker/Dockerfile.ai
      target: production
    container_name: pocwhisp-ai
    environment:
      - AI_HOST=0.0.0.0
      - AI_PORT=8081
      - DEVICE=auto
      - WHISPER_MODEL=${WHISPER_MODEL:-base}
      - LLAMA_MODEL_PATH=${LLAMA_MODEL_PATH:-}
      - GPU_MEMORY_FRACTION=${GPU_MEMORY_FRACTION:-0.8}
      - MAX_AUDIO_LENGTH=${MAX_AUDIO_LENGTH:-1800}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - CORS_ORIGINS=["*"]
    volumes:
      - ai_models:/app/models
      - ai_temp:/app/tmp
    ports:
      - "8081:8081"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      - pocwhisp-network
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]

  # AI Service CPU-only (fallback)
  ai-service-cpu:
    build:
      context: ..
      dockerfile: docker/Dockerfile.ai
      target: cpu-only
    container_name: pocwhisp-ai-cpu
    environment:
      - AI_HOST=0.0.0.0
      - AI_PORT=8081
      - DEVICE=cpu
      - WHISPER_MODEL=tiny
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - CORS_ORIGINS=["*"]
    volumes:
      - ai_models:/app/models
      - ai_temp:/app/tmp
    ports:
      - "8082:8081"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      - pocwhisp-network
    profiles:
      - cpu-only

  # Go API Service
  api:
    build:
      context: ..
      dockerfile: docker/Dockerfile.api
    container_name: pocwhisp-api
    environment:
      - PORT=8080
      - AI_SERVICE_URL=http://ai-service:8081
      - DB_HOST=database
      - DB_PORT=5432
      - DB_NAME=pocwhisp
      - DB_USER=pocwhisp
      - DB_PASSWORD=${DB_PASSWORD:-pocwhisp_secure_password}
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - api_temp:/tmp/pocwhisp
      - api_data:/app/data
    ports:
      - "8080:8080"
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
      ai-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/v1/live"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    networks:
      - pocwhisp-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:1.25-alpine
    container_name: pocwhisp-nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - api
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - pocwhisp-network

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: pocwhisp-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    restart: unless-stopped
    networks:
      - pocwhisp-network
    profiles:
      - monitoring

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:10.1.0
    container_name: pocwhisp-grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - pocwhisp-network
    profiles:
      - monitoring

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  ai_models:
    driver: local
  ai_temp:
    driver: local
  api_temp:
    driver: local
  api_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  pocwhisp-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
