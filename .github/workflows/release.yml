name: Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      version:
        description: "Version to release (e.g., v1.0.0)"
        required: true
        type: string
      pre_release:
        description: "Mark as pre-release"
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

permissions:
  contents: write
  packages: write
  actions: read
  security-events: write

jobs:
  # =============================================================================
  # RELEASE VALIDATION
  # =============================================================================

  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
            IS_PRERELEASE="${{ github.event.inputs.pre_release }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
            # Check if version contains pre-release indicators
            if [[ "$VERSION" =~ (alpha|beta|rc|pre) ]]; then
              IS_PRERELEASE="true"
            else
              IS_PRERELEASE="false"
            fi
          fi

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "is_prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT

          echo "📦 Release Version: $VERSION"
          echo "🚀 Pre-release: $IS_PRERELEASE"

      - name: Validate version format
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if [[ ! "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?$ ]]; then
            echo "❌ Invalid version format: $VERSION"
            echo "Expected format: v1.2.3 or v1.2.3-alpha.1"
            exit 1
          fi
          echo "✅ Version format is valid"

      - name: Check if tag exists
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if git tag -l | grep -q "^$VERSION$"; then
            if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
              echo "❌ Tag $VERSION already exists"
              exit 1
            fi
          fi

  # =============================================================================
  # BUILD RELEASE ARTIFACTS
  # =============================================================================

  build-artifacts:
    name: Build Release Artifacts
    runs-on: ubuntu-latest
    needs: [validate-release]
    outputs:
      api-image: ${{ steps.meta-api.outputs.tags }}
      ai-image: ${{ steps.meta-ai.outputs.tags }}
    strategy:
      matrix:
        service: [api, ai]
        platform: [linux/amd64, linux/arm64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta-${{ matrix.service }}
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}
          tags: |
            type=semver,pattern={{version}},value=${{ needs.validate-release.outputs.version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ needs.validate-release.outputs.version }}
            type=semver,pattern={{major}},value=${{ needs.validate-release.outputs.version }},enable={{is_default_branch}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile.${{ matrix.service }}
          target: ${{ matrix.service == 'ai' && 'production' || '' }}
          platforms: ${{ matrix.platform }}
          push: true
          tags: ${{ steps.meta-api.outputs.tags || steps.meta-ai.outputs.tags }}
          labels: ${{ steps.meta-api.outputs.labels || steps.meta-ai.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ needs.validate-release.outputs.version }}
            BUILD_DATE=${{ github.event.repository.updated_at }}
            COMMIT_SHA=${{ github.sha }}

  # =============================================================================
  # SECURITY SCAN RELEASE
  # =============================================================================

  security-scan-release:
    name: Security Scan Release
    runs-on: ubuntu-latest
    needs: [build-artifacts]
    strategy:
      matrix:
        service: [api, ai]
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}:${{ needs.validate-release.outputs.version }}
          format: "sarif"
          output: "trivy-${{ matrix.service }}.sarif"

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "trivy-${{ matrix.service }}.sarif"

      - name: Check for critical vulnerabilities
        run: |
          # Fail if critical vulnerabilities are found
          if grep -q '"level": "ERROR"' trivy-${{ matrix.service }}.sarif; then
            echo "❌ Critical vulnerabilities found in ${{ matrix.service }} image"
            echo "Please fix before releasing"
            exit 1
          fi
          echo "✅ No critical vulnerabilities found"

  # =============================================================================
  # GENERATE RELEASE NOTES
  # =============================================================================

  generate-release-notes:
    name: Generate Release Notes
    runs-on: ubuntu-latest
    needs: [validate-release]
    outputs:
      release-notes: ${{ steps.notes.outputs.notes }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate release notes
        id: notes
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"

          # Get previous tag
          PREVIOUS_TAG=$(git tag --sort=-version:refname | grep -v "$VERSION" | head -n1)

          if [ -z "$PREVIOUS_TAG" ]; then
            echo "🎉 Initial release"
            RANGE=""
          else
            echo "📝 Changes since $PREVIOUS_TAG"
            RANGE="$PREVIOUS_TAG..$VERSION"
          fi

          # Generate changelog
          cat > release_notes.md << EOF
          # PocWhisp $VERSION

          ## 🚀 What's New

          EOF

          # Add commit messages categorized
          if [ -n "$RANGE" ]; then
            echo "### ✨ Features" >> release_notes.md
            git log $RANGE --pretty=format:"- %s" --grep="feat" --grep="feature" >> release_notes.md || true
            echo "" >> release_notes.md
            
            echo "### 🐛 Bug Fixes" >> release_notes.md
            git log $RANGE --pretty=format:"- %s" --grep="fix" --grep="bug" >> release_notes.md || true
            echo "" >> release_notes.md
            
            echo "### 📚 Documentation" >> release_notes.md
            git log $RANGE --pretty=format:"- %s" --grep="docs" --grep="doc" >> release_notes.md || true
            echo "" >> release_notes.md
            
            echo "### 🔧 Maintenance" >> release_notes.md
            git log $RANGE --pretty=format:"- %s" --grep="chore" --grep="refactor" >> release_notes.md || true
            echo "" >> release_notes.md
          fi

          # Add deployment information
          cat >> release_notes.md << EOF

          ## 🐳 Docker Images

          - **API Service**: \`ghcr.io/${{ github.repository }}-api:$VERSION\`
          - **AI Service**: \`ghcr.io/${{ github.repository }}-ai:$VERSION\`

          ## 📋 Deployment

          ### Quick Start

          \`\`\`bash
          # Clone the repository
          git clone https://github.com/${{ github.repository }}.git
          cd pocwhisp
          git checkout $VERSION

          # Start with Docker Compose
          cd docker
          cp env.example .env
          docker-compose up -d
          \`\`\`

          ### Kubernetes

          \`\`\`bash
          # Update your deployment manifests to use:
          # ghcr.io/${{ github.repository }}-api:$VERSION
          # ghcr.io/${{ github.repository }}-ai:$VERSION
          kubectl apply -f k8s/
          \`\`\`

          ## 🔒 Security

          - All container images have been scanned for vulnerabilities
          - No critical security issues detected
          - Dependencies updated to latest secure versions

          ## 📊 Performance

          | Metric | Value |
          |--------|-------|
          | API Response Time | < 100ms |
          | Transcription Speed | 25x real-time |
          | Memory Usage | < 2GB |
          | GPU Memory | < 8GB |

          ## 🆕 Breaking Changes

          $(if [ "${{ needs.validate-release.outputs.is_prerelease }}" = "true" ]; then echo "⚠️ This is a pre-release version. Breaking changes may occur."; fi)

          ## 📖 Documentation

          - [API Documentation](https://github.com/${{ github.repository }}/blob/$VERSION/README.md)
          - [Deployment Guide](https://github.com/${{ github.repository }}/blob/$VERSION/docker/README.md)
          - [Developer Guide](https://github.com/${{ github.repository }}/blob/$VERSION/docs/DEVELOPMENT.md)

          ## 🤝 Contributors

          Thanks to all contributors who made this release possible!

          ---

          **Full Changelog**: https://github.com/${{ github.repository }}/compare/$PREVIOUS_TAG...$VERSION
          EOF

          # Output the notes
          NOTES=$(cat release_notes.md)
          echo "notes<<EOF" >> $GITHUB_OUTPUT
          echo "$NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  # =============================================================================
  # CREATE GITHUB RELEASE
  # =============================================================================

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs:
      [
        validate-release,
        build-artifacts,
        security-scan-release,
        generate-release-notes,
      ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create or update tag
        if: github.event_name == 'workflow_dispatch'
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          git tag $VERSION
          git push origin $VERSION

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.validate-release.outputs.version }}
          release_name: PocWhisp ${{ needs.validate-release.outputs.version }}
          body: ${{ needs.generate-release-notes.outputs.release-notes }}
          draft: false
          prerelease: ${{ needs.validate-release.outputs.is_prerelease }}

      - name: Upload release assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: docker/docker-compose.yml
          asset_name: docker-compose.yml
          asset_content_type: application/x-yaml

  # =============================================================================
  # DEPLOY TO PRODUCTION
  # =============================================================================

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [create-release, validate-release]
    if: needs.validate-release.outputs.is_prerelease == 'false'
    environment:
      name: production
      url: https://api.pocwhisp.com
    steps:
      - name: Deploy to production
        run: |
          echo "🚀 Deploying version ${{ needs.validate-release.outputs.version }} to production"

          # This would trigger your production deployment
          # Examples:
          # - Update Kubernetes manifests
          # - Trigger AWS ECS deployment
          # - Update Terraform configurations
          # - Send deployment webhook

          curl -X POST "${{ secrets.DEPLOY_WEBHOOK_URL }}" \
            -H "Authorization: Bearer ${{ secrets.DEPLOY_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{
              "version": "${{ needs.validate-release.outputs.version }}",
              "environment": "production",
              "images": {
                "api": "ghcr.io/${{ github.repository }}-api:${{ needs.validate-release.outputs.version }}",
                "ai": "ghcr.io/${{ github.repository }}-ai:${{ needs.validate-release.outputs.version }}"
              }
            }'

  # =============================================================================
  # POST-RELEASE TASKS
  # =============================================================================

  post-release:
    name: Post-Release Tasks
    runs-on: ubuntu-latest
    needs: [create-release, validate-release]
    steps:
      - name: Update documentation
        run: |
          echo "📚 Updating documentation for ${{ needs.validate-release.outputs.version }}"
          # Could trigger documentation builds, wiki updates, etc.

      - name: Notify teams
        uses: 8398a7/action-slack@v3
        with:
          status: "success"
          text: |
            🎉 New Release: PocWhisp ${{ needs.validate-release.outputs.version }}

            🐳 Docker Images:
            • API: ghcr.io/${{ github.repository }}-api:${{ needs.validate-release.outputs.version }}
            • AI: ghcr.io/${{ github.repository }}-ai:${{ needs.validate-release.outputs.version }}

            📖 Release Notes: https://github.com/${{ github.repository }}/releases/tag/${{ needs.validate-release.outputs.version }}

            ${{ needs.validate-release.outputs.is_prerelease == 'true' && '⚠️ Pre-release version' || '🚀 Production ready' }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Create milestone for next version
        uses: actions/github-script@v6
        with:
          script: |
            const version = '${{ needs.validate-release.outputs.version }}';
            const parts = version.replace('v', '').split('.');
            const nextMinor = `v${parts[0]}.${parseInt(parts[1]) + 1}.0`;

            try {
              await github.rest.issues.createMilestone({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: nextMinor,
                description: `Next minor release after ${version}`,
                state: 'open'
              });
              console.log(`📋 Created milestone: ${nextMinor}`);
            } catch (error) {
              console.log(`Milestone ${nextMinor} may already exist`);
            }

  # =============================================================================
  # RELEASE SUMMARY
  # =============================================================================

  release-summary:
    name: Release Summary
    runs-on: ubuntu-latest
    needs: [validate-release, create-release, deploy-production, post-release]
    if: always()
    steps:
      - name: Generate release summary
        run: |
          echo "## 🎉 Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ needs.validate-release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Type:** ${{ needs.validate-release.outputs.is_prerelease == 'true' && 'Pre-release' || 'Production Release' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Validation | ${{ needs.validate-release.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build | ${{ needs.build-artifacts.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Scan | ${{ needs.security-scan-release.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| GitHub Release | ${{ needs.create-release.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Production Deploy | ${{ needs.deploy-production.result || 'Skipped' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Post-Release | ${{ needs.post-release.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🐳 **Docker Images:**" >> $GITHUB_STEP_SUMMARY
          echo "- API: \`ghcr.io/${{ github.repository }}-api:${{ needs.validate-release.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- AI: \`ghcr.io/${{ github.repository }}-ai:${{ needs.validate-release.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📖 **Release Notes:** https://github.com/${{ github.repository }}/releases/tag/${{ needs.validate-release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
